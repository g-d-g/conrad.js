{"name":"conrad.js","tagline":"A tiny JavaScript scheduler","body":"conrad.js\r\n=========\r\n\r\n***conrad* is a tiny JavaScript scheduler, developped by [Alexis Jacomy](http://github.com/jacomyal) at the [m√©dialab](http://github.com/medialab). It is released under the [MIT License](https://raw.github.com/jacomyal/conrad.js/master/LICENSE.txt).**\r\n\r\nIt has been initially built to replace the internal scheduler in *an upcoming version of* [sigma.js](http://sigmajs.org), that deals with graph layout algorithms and heavy canvas drawing processes.\r\n\r\nHere is how it works:\r\n\r\n 1. First, you need to cut your tasks as small jobs.\r\n 2. These jobs are functions that will be executed many times to complete the task.\r\n 3. *conrad* will execute these jobs such that they each take the same \"computation time\".\r\n 4. To avoid interface freezing, rendering frames are requested when needed.\r\n\r\n## Documentation\r\n\r\n#### Add a single job\r\n\r\nBy default, a job is executed until it returns a \"falsy\" value:\r\n\r\n```javascript\r\nvar executed = 0;\r\n\r\nconrad.addJob('myJob', function() {\r\n  return ++executed < 10;\r\n});\r\n```\r\n\r\n#### Add several jobs simultaneously\r\n\r\nIt is possible to add several jobs at the same time, to avoid a job starting before others are actually added:\r\n\r\n```javascript\r\nvar executed1 = 0,\r\n    executed2 = 0;\r\n\r\nconrad.addJob({\r\n  myJob1: function() {\r\n    return ++executed1 < 10;\r\n  },\r\n  myJob2: function() {\r\n    return ++executed2 < 10;\r\n  }\r\n});\r\n```\r\n\r\n#### Specify how much times a job must be executed\r\n\r\nInstead of waiting for the job to return `false` to end it, it is possible to specify a number of times it as to be executed, with the key `count`:\r\n\r\n```javascript\r\nvar executed = 0;\r\n\r\nconrad.addJob('myJob', {\r\n  count: 10,\r\n  job: function() {\r\n    executed++;\r\n  }\r\n});\r\n```\r\n\r\n#### Catch a job end\r\n\r\nIf an `end` function is specified, it will be executed when the job is ended or killed.\r\n\r\n```javascript\r\nvar executed = 0;\r\n\r\nconrad.addJob('myJob', {\r\n  job: function() {\r\n    return ++executed < 10;\r\n  },\r\n  end: function() {\r\n    console.log('Job executed ' + executed + ' times.');\r\n  }\r\n});\r\n```\r\n\r\n#### Queue jobs\r\n\r\nAdding an `after` string to a job will make it start only when a job with the specified id ends.\r\n\r\n```javascript\r\nvar executed1 = 0,\r\n    executed2 = 0;\r\n\r\nconrad.addJob({\r\n  myJob1: function() {\r\n    return ++executed1 < 10;\r\n  },\r\n  myJob2: {\r\n    after: 'job1',\r\n    job: function() {\r\n      return ++executed2 < 10;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Weighted jobs\r\n\r\nIt is possible to weight jobs to modify the priorities. The default `weight` value is 1. In the following example, both `\"myJob1\"` and  `\"myJob2\"` last around 10ms. `\"myJob1\"` must be executed 10 times and `\"myJob2\"` 20. They will both end at the same time, because  `\"myJob2\"` as a `weight` of 2, and so will have twice more \"*computer time*\" than `\"myJob1\"`.\r\n\r\n```javascript\r\nvar executed1 = 0,\r\n    executed2 = 0;\r\n\r\nfunction sleep(t) {\r\n  var d = new Date().getTime();\r\n  while (new Date().getTime() - d < t) {}\r\n}\r\n\r\nconrad.addJob({\r\n  myJob1: function() {\r\n    sleep(10);\r\n    return ++executed1 < 10;\r\n  },\r\n  myJob2: {\r\n    weight: 2,\r\n    job: function() {\r\n      sleep(10);\r\n      return ++executed2 < 20;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Kill jobs\r\n\r\n*conrad* provides two different methods to kill manually jobs that are running.\r\n\r\n```javascript\r\n// Kill one job:\r\nif (conrad.hasJob('myJob1'))\r\n  conrad.killJob('myJob1');\r\n\r\n// Kill some jobs:\r\nvar jobsToKill = ['myJob1', 'myJob2', 'myJob3'];\r\nif (jobsToKill.every(conrad.hasJob))\r\n  conrad.killJob(jobsToKill);\r\n\r\n// Kill all jobs:\r\nconrad.killAll();\r\n```\r\n\r\n#### Monitoring\r\n\r\nThere are two features dedicated to monitor what is happening in *conrad*. First, the method `conrad.getStats()` returns an array of jobs, with every data stored about them (average time per job, number of times the job has been executed yet, etc...):\r\n\r\n```javascript\r\n// Getting all done jobs:\r\nconrad.getStats('done');\r\n\r\n// Getting all running jobs:\r\nconrad.getStats('running');\r\n\r\n// Getting all jobs with id \"myJobId\":\r\nconrad.getStats('myJobId');\r\n\r\n// Getting all jobs with id matching a regular expression:\r\nconrad.getStats(/^myJob_/);\r\n\r\n// Getting all running jobs with id matching a regular expression:\r\nconrad.getStats('running', /^myJob_/);\r\n\r\n// Logging in the console the average time per running job:\r\nconrad.getStats('running').forEach(function(job) {\r\n  console.log(job.id, job.averageTime);\r\n});\r\n```\r\n\r\nSince storing everything about the jobs when they die can be memory expensive, it is possible to disable the history. Also, the method `conrad.clearHistory()` empties every data about done jobs.\r\n\r\n```javascript\r\n// Keeping conrad from storing history:\r\nconrad.settings('history', false);\r\n\r\n// Clearing history:\r\nconrad.clearHistory();\r\n```\r\n\r\nAlso, *conrad* dispatches custom events when some actions are executed (`\"start\"`, `\"stop\"`, `\"enterFrame\"`...). The methods `conrad.bind()` and `conrad.unbind()` make possible to bind and unbind functions to these events.\r\n\r\n```javascript\r\nvar jobAddedHandler = function(e) {\r\n      console.log('Job \"' + e.data.id + '\" added.');\r\n    },\r\n    jobStartedHandler = function(e) {\r\n      console.log('Job \"' + e.data.id + '\" started.');\r\n    },\r\n    jobEndedHandler = function(e) {\r\n      console.log('Job \"' + e.data.id + '\" ended.');\r\n    },\r\n    stopHandler = function(e) {\r\n      console.log('conrad has stopped, let\\'s unbind our handlers.');\r\n      conrad.unbind('jobAdded', jobAddedHandler)\r\n            .unbind('jobStarted', jobStartedHandler)\r\n            .unbind('jobEnded', jobEndedHandler)\r\n            .unbind('stop', stopHandler);\r\n    },\r\n    executed = 0;\r\n\r\n// Bind handlers:\r\nconrad.bind('jobAdded', jobAddedHandler)\r\n      .bind('jobStarted', jobStartedHandler)\r\n      .bind('jobEnded', jobEndedHandler)\r\n      .bind('stop', stopHandler);\r\n\r\n// Add the job:\r\nconrad.addJob('myJob', function() {\r\n  return ++executed < 10;\r\n});\r\n```\r\n\r\nThe events dispatched by *conrad* are:\r\n\r\n - `jobAdded`\r\n - `jobStarted`\r\n - `jobEnded`\r\n - `stop`\r\n - `start`\r\n - `enterFrame`\r\n\r\n#### Some guidelines\r\n\r\nHere are some tips and guidelines about how and when to use *conrad*:\r\n\r\n - To make *conrad* works well, jobs have to last less than the expected time of a frame - something like 20ms. Also, it is adviced to design your jobs such that they are not too quick, to reduce the number a function calls.\r\n - It is possible to use *conrad* to avoid interface freezing during drawing. Nevertheless, it should not be used to deal with animations, since the speed of the processing will strongly depends on the client computer power.\r\n - *conrad* works only with `window.setTimeout(fn, 0)` and does not use Web Workers (at least yet). It will work well until you call too often `window.setTimeout()` by yourself while *conrad* is running.\r\n\r\n## Build\r\n\r\nTo use it, clone the repository:\r\n\r\n```\r\ngit clone git@github.com:jacomyal/conrad.js.git\r\n```\r\n\r\nThe latest minified version is available here:\r\n\r\n[https://raw.github.com/jacomyal/conrad.js/master/build/conrad.min.js](https://raw.github.com/jacomyal/conrad.js/master/build/conrad.min.js)\r\n\r\nYou can also minify your own version with [Grunt](http://gruntjs.com/):\r\n\r\n - Install [Node.js](http://nodejs.org/), [NPM](https://npmjs.org/) and [Grunt](http://gruntjs.com/installing-grunt).\r\n - Use `npm install` to install *conrad* development dependencies.\r\n - Use `grunt` to check sources linting, launch unit tests, and minify the code with [Uglify](https://github.com/mishoo/UglifyJS).\r\n\r\n## Contribute\r\n\r\n**Contributions are welcome!** You can contribute by submitting [issues](http://github.com/jacomyal/conrad.js/issues) and proposing [pull requests](http://github.com/jacomyal/conrad.js/pulls). Be sure to successfully run `grunt` **before submitting any pull request**, to check unit tests and sources lint.\r\n\r\nThe whole source code is validated by the [Google Closure Linter](https://developers.google.com/closure/utilities/), and the comments are written in [JSDoc](http://en.wikipedia.org/wiki/JSDoc) (tags description is available [here](https://developers.google.com/closure/compiler/docs/js-for-compiler)).\r\n","google":"UA-42920104-1","note":"Don't delete this file! It's used internally to help with page regeneration."}